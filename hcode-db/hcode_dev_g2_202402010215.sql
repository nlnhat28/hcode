--
-- Script was generated by Devart dbForge Studio 2022 for MySQL, Version 9.1.21.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 01/02/2024 02:15:47
-- Server version: 8.0.32
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE hcode_dev_g2;

--
-- Drop procedure `proc_ContestAccount_Filter`
--
DROP PROCEDURE IF EXISTS proc_ContestAccount_Filter;

--
-- Drop procedure `proc_Role_GetAll`
--
DROP PROCEDURE IF EXISTS proc_Role_GetAll;

--
-- Drop procedure `proc_Role_GetByCode`
--
DROP PROCEDURE IF EXISTS proc_Role_GetByCode;

--
-- Drop procedure `proc_Submission_Filter`
--
DROP PROCEDURE IF EXISTS proc_Submission_Filter;

--
-- Drop view `view_submission_list`
--
DROP VIEW IF EXISTS view_submission_list CASCADE;

--
-- Drop table `submission`
--
DROP TABLE IF EXISTS submission;

--
-- Drop view `view_language`
--
DROP VIEW IF EXISTS view_language CASCADE;

--
-- Drop procedure `proc_Problem_Get`
--
DROP PROCEDURE IF EXISTS proc_Problem_Get;

--
-- Drop view `view_problem`
--
DROP VIEW IF EXISTS view_problem CASCADE;

--
-- Drop table `language`
--
DROP TABLE IF EXISTS language;

--
-- Drop procedure `proc_Contest_Get`
--
DROP PROCEDURE IF EXISTS proc_Contest_Get;

--
-- Drop view `view_contest_account`
--
DROP VIEW IF EXISTS view_contest_account CASCADE;

--
-- Drop view `view_contest_account_list`
--
DROP VIEW IF EXISTS view_contest_account_list CASCADE;

--
-- Drop view `view_contest_list`
--
DROP VIEW IF EXISTS view_contest_list CASCADE;

--
-- Drop procedure `proc_Contest_Filter`
--
DROP PROCEDURE IF EXISTS proc_Contest_Filter;

--
-- Drop table `contest_account`
--
DROP TABLE IF EXISTS contest_account;

--
-- Drop view `view_contest_problem_account`
--
DROP VIEW IF EXISTS view_contest_problem_account CASCADE;

--
-- Drop table `contest_problem_account`
--
DROP TABLE IF EXISTS contest_problem_account;

--
-- Drop view `view_contest_problem_list`
--
DROP VIEW IF EXISTS view_contest_problem_list CASCADE;

--
-- Drop table `contest_problem`
--
DROP TABLE IF EXISTS contest_problem;

--
-- Drop view `view_contest`
--
DROP VIEW IF EXISTS view_contest CASCADE;

--
-- Drop table `contest`
--
DROP TABLE IF EXISTS contest;

--
-- Drop table `parameter`
--
DROP TABLE IF EXISTS parameter;

--
-- Drop view `view_problem_list`
--
DROP VIEW IF EXISTS view_problem_list CASCADE;

--
-- Drop procedure `proc_Problem_Filter`
--
DROP PROCEDURE IF EXISTS proc_Problem_Filter;

--
-- Drop procedure `proc_ProblemAccount_Audit`
--
DROP PROCEDURE IF EXISTS proc_ProblemAccount_Audit;

--
-- Drop table `problem_account`
--
DROP TABLE IF EXISTS problem_account;

--
-- Drop table `testcase`
--
DROP TABLE IF EXISTS testcase;

--
-- Drop procedure `proc_Problem_GetForContest`
--
DROP PROCEDURE IF EXISTS proc_Problem_GetForContest;

--
-- Drop procedure `proc_Problem_GetMaxCode`
--
DROP PROCEDURE IF EXISTS proc_Problem_GetMaxCode;

--
-- Drop table `problem`
--
DROP TABLE IF EXISTS problem;

--
-- Drop procedure `proc_Account_GetByUsername`
--
DROP PROCEDURE IF EXISTS proc_Account_GetByUsername;

--
-- Drop procedure `proc_Account_Login`
--
DROP PROCEDURE IF EXISTS proc_Account_Login;

--
-- Drop view `view_account`
--
DROP VIEW IF EXISTS view_account CASCADE;

--
-- Drop procedure `proc_Account_Insert_ob`
--
DROP PROCEDURE IF EXISTS proc_Account_Insert_ob;

--
-- Drop table `account`
--
DROP TABLE IF EXISTS account;

--
-- Set default database
--
USE hcode_dev_g2;

--
-- Create table `account`
--
CREATE TABLE account (
  AccountId char(36) NOT NULL DEFAULT (UUID()),
  Username varchar(50) NOT NULL,
  Password varchar(255) NOT NULL,
  Email varchar(100) NOT NULL,
  Phone varchar(50) DEFAULT NULL,
  FullName varchar(100) DEFAULT NULL,
  Gender int DEFAULT NULL COMMENT '0: Nam; 1: Nữ; 3: Khác',
  Avatar blob DEFAULT NULL,
  DateOfBirth date DEFAULT NULL,
  Role int DEFAULT NULL,
  IsVerified tinyint(1) DEFAULT 0,
  CreatedBy varchar(255) DEFAULT NULL,
  CreatedTime datetime DEFAULT NULL,
  ModifiedBy varchar(255) DEFAULT NULL,
  ModifiedTime datetime DEFAULT NULL,
  Salt varchar(255) NOT NULL,
  PRIMARY KEY (AccountId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 13468,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `UK_account_AccountId` on table `account`
--
ALTER TABLE account
ADD UNIQUE INDEX UK_account_AccountId (AccountId);

--
-- Create index `UK_account_Username` on table `account`
--
ALTER TABLE account
ADD UNIQUE INDEX UK_account_Username (Username);

--
-- Create index `IDX_account_Password` on table `account`
--
ALTER TABLE account
ADD INDEX IDX_account_Password (Password);

--
-- Create index `IDX_account_FullName` on table `account`
--
ALTER TABLE account
ADD INDEX IDX_account_FullName (FullName);

--
-- Create index `IDX_account_Email` on table `account`
--
ALTER TABLE account
ADD INDEX IDX_account_Email (Email);

--
-- Create index `IDX_account_Salt` on table `account`
--
ALTER TABLE account
ADD INDEX IDX_account_Salt (Salt);

--
-- Create index `IDX_account_RoleId` on table `account`
--
ALTER TABLE account
ADD INDEX IDX_account_RoleId (Role);

DELIMITER $$

--
-- Create procedure `proc_Account_Insert_ob`
--
CREATE PROCEDURE proc_Account_Insert_ob (IN p_AccountId char(36), IN p_Username varchar(50), IN p_Password varchar(255), IN p_Salt varchar(255), IN p_Email varchar(100), IN p_Phone varchar(50), IN p_FullName varchar(100), IN p_Gender int, IN p_Avatar blob, IN p_DateOfBirth date, IN p_RoleId char(36), IN p_IsVerified tinyint(1), IN p_CreatedBy varchar(255), IN p_CreatedTime datetime, IN p_ModifiedBy varchar(255), IN p_ModifiedTime datetime, OUT p_AccountIdOut char(36))
SQL SECURITY INVOKER
COMMENT 'Thêm mới 1 tài khoản'
BEGIN
  INSERT INTO account (AccountId,
  Username,
  Password,
  Salt,
  Email,
  Phone,
  FullName,
  Gender,
  Avatar,
  DateOfBirth,
  RoleId,
  IsVerified,
  CreatedBy,
  CreatedTime,
  ModifiedBy,
  ModifiedTime)
    VALUES (p_AccountId, p_Username, p_Password, p_Salt, p_Email, p_Phone, p_FullName, p_Gender, p_Avatar, p_DateOfBirth, p_RoleId, p_IsVerified, p_CreatedBy, p_CreatedTime, p_ModifiedBy, p_ModifiedTime);

  SELECT
    p_AccountId INTO p_AccountIdOut;
END
$$

DELIMITER ;

--
-- Create view `view_account`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_account
AS
SELECT
  ROW_NUMBER() OVER (
  ORDER BY `a`.`CreatedTime` DESC, `a`.`Username`) AS `RowNumber`,
  `a`.`AccountId` AS `AccountId`,
  `a`.`Username` AS `Username`,
  `a`.`Password` AS `Password`,
  `a`.`Salt` AS `Salt`,
  `a`.`Email` AS `Email`,
  `a`.`Phone` AS `Phone`,
  `a`.`FullName` AS `FullName`,
  `a`.`Gender` AS `Gender`,
  `a`.`Avatar` AS `Avatar`,
  `a`.`DateOfBirth` AS `DateOfBirth`,
  `a`.`Role` AS `Role`,
  `a`.`IsVerified` AS `IsVerified`,
  `a`.`CreatedBy` AS `CreatedBy`,
  `a`.`CreatedTime` AS `CreatedTime`,
  `a`.`ModifiedBy` AS `ModifiedBy`,
  `a`.`ModifiedTime` AS `ModifiedTime`
FROM `account` `a`;

DELIMITER $$

--
-- Create procedure `proc_Account_Login`
--
CREATE PROCEDURE proc_Account_Login (IN p_Username varchar(255), IN p_Password varchar(255))
SQL SECURITY INVOKER
BEGIN
  SELECT
    *
  FROM view_account va
  WHERE va.Username = p_Username
  AND va.Password = p_Password;
END
$$

--
-- Create procedure `proc_Account_GetByUsername`
--
CREATE PROCEDURE proc_Account_GetByUsername (IN p_Username varchar(255))
SQL SECURITY INVOKER
BEGIN
  SELECT
    *
  FROM view_account va
  WHERE va.Username LIKE p_Username;
END
$$

DELIMITER ;

--
-- Create table `problem`
--
CREATE TABLE problem (
  ProblemId char(36) NOT NULL DEFAULT (UUID()),
  ProblemCode int NOT NULL,
  ProblemName varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_as_ci NOT NULL,
  Alias varchar(255) DEFAULT NULL,
  Difficulty int DEFAULT 1,
  Content text DEFAULT NULL,
  Hint text DEFAULT NULL,
  Solution text DEFAULT NULL,
  SolutionLanguageId char(36) DEFAULT NULL,
  LimitTime decimal(10, 6) DEFAULT NULL COMMENT 'milisecond',
  LimitMemory decimal(10, 4) DEFAULT NULL COMMENT 'byte',
  AccountId char(36) DEFAULT NULL,
  State int DEFAULT NULL COMMENT '1:  Public; 2: DeactivatedPublic; 3: Private ',
  CreatedBy varchar(255) DEFAULT NULL,
  CreatedTime datetime DEFAULT NULL,
  ModifiedBy varchar(255) DEFAULT NULL,
  ModifiedTime datetime DEFAULT NULL,
  Topic varchar(255) DEFAULT NULL,
  OutputType int DEFAULT NULL,
  IsDraft tinyint(1) DEFAULT 0,
  PRIMARY KEY (ProblemId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 576,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `UK_problem_ProblemId` on table `problem`
--
ALTER TABLE problem
ADD UNIQUE INDEX UK_problem_ProblemId (ProblemId);

--
-- Create index `UK_problem_Alias` on table `problem`
--
ALTER TABLE problem
ADD UNIQUE INDEX UK_problem_Alias (Alias);

--
-- Create index `IDX_problem_ProblemName` on table `problem`
--
ALTER TABLE problem
ADD INDEX IDX_problem_ProblemName (ProblemName);

--
-- Create index `IDX_problem_AccountId` on table `problem`
--
ALTER TABLE problem
ADD INDEX IDX_problem_AccountId (AccountId);

--
-- Create index `IDX_problem_ProblemCode` on table `problem`
--
ALTER TABLE problem
ADD INDEX IDX_problem_ProblemCode (ProblemCode);

--
-- Create foreign key
--
ALTER TABLE problem
ADD CONSTRAINT FK_problem_AccountId FOREIGN KEY (AccountId)
REFERENCES account (AccountId) ON DELETE CASCADE;

DELIMITER $$

--
-- Create procedure `proc_Problem_GetMaxCode`
--
CREATE PROCEDURE proc_Problem_GetMaxCode (IN p_State int,
IN p_AccountId char(36))
SQL SECURITY INVOKER
BEGIN
  SET @PublicState = 1;
  SET @PrivateState = 3;

  IF (p_State = @PublicState) THEN
    SELECT
      COALESCE(MAX(CAST(p.ProblemCode AS UNSIGNED)), 0) AS MaxCode
    FROM problem p
    WHERE p.State = p_State;

  ELSEIF (p_State = @PrivateState) THEN
    SELECT
      COALESCE(MAX(CAST(p.ProblemCode AS UNSIGNED)), 0) AS MaxCode
    FROM problem p
    WHERE p.State = p_State
    AND p.AccountId = p_AccountId;
  END IF;

END
$$

--
-- Create procedure `proc_Problem_GetForContest`
--
CREATE PROCEDURE proc_Problem_GetForContest (IN p_AccountId char(36))
SQL SECURITY INVOKER
BEGIN
  SELECT
    ROW_NUMBER() OVER (
    ORDER BY `p`.`ProblemCode`, `p`.`ProblemName`, `p`.`CreatedTime`) AS `RowNumber`,
    `p`.`ProblemId` AS `ProblemId`,
    `p`.`ProblemCode` AS `ProblemCode`,
    CONCAT(`p`.`ProblemCode`, '. ', `p`.`ProblemName`) AS `ProblemName`,
    `p`.`Alias` AS `Alias`,
    `p`.`Difficulty` AS `Difficulty`,
    `p`.`Content` AS `Content`,
    `p`.`LimitTime` AS `LimitTime`,
    `p`.`LimitMemory` AS `LimitMemory`,
    `p`.`AccountId` AS `AccountId`,
    `p`.`State` AS `State`,
    `p`.`CreatedBy` AS `CreatedBy`,
    `p`.`CreatedTime` AS `CreatedTime`,
    `p`.`ModifiedBy` AS `ModifiedBy`,
    `p`.`ModifiedTime` AS `ModifiedTime`,
    `p`.`Topic` AS `Topic`,
    `p`.`IsDraft` AS `IsDraft`
  FROM problem p
  WHERE p.IsDraft = 0
  AND p.AccountId = p_AccountId
  ;
END
$$

DELIMITER ;

--
-- Create table `testcase`
--
CREATE TABLE testcase (
  TestcaseId char(36) NOT NULL DEFAULT (UUID()),
  ProblemId char(36) NOT NULL,
  Inputs json DEFAULT NULL,
  ExpectedOutput text DEFAULT NULL,
  TestcaseOrder int DEFAULT NULL,
  AllowView tinyint(1) DEFAULT 1,
  IsActivated tinyint(1) DEFAULT 1,
  PRIMARY KEY (TestcaseId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 163,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `UK_testcase_TestcaseId` on table `testcase`
--
ALTER TABLE testcase
ADD UNIQUE INDEX UK_testcase_TestcaseId (TestcaseId);

--
-- Create index `IDX_testcase_ProblemId` on table `testcase`
--
ALTER TABLE testcase
ADD INDEX IDX_testcase_ProblemId (ProblemId);

--
-- Create foreign key
--
ALTER TABLE testcase
ADD CONSTRAINT FK_testcase_ProblemId FOREIGN KEY (ProblemId)
REFERENCES problem (ProblemId) ON DELETE CASCADE;

--
-- Create table `problem_account`
--
CREATE TABLE problem_account (
  ProblemAccountId char(36) NOT NULL DEFAULT 'uuid',
  ProblemId char(36) NOT NULL,
  AccountId char(36) NOT NULL,
  State int DEFAULT NULL COMMENT '1: Seen; 2: Doing; 3: Wrong; 4: Solved',
  PRIMARY KEY (ProblemAccountId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 297,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `UK_problem_account_ProblemAccountId` on table `problem_account`
--
ALTER TABLE problem_account
ADD UNIQUE INDEX UK_problem_account_ProblemAccountId (ProblemAccountId);

--
-- Create index `IDX_problem_account_ProblemId` on table `problem_account`
--
ALTER TABLE problem_account
ADD INDEX IDX_problem_account_ProblemId (ProblemId);

--
-- Create index `IDX_problem_account_AccountId` on table `problem_account`
--
ALTER TABLE problem_account
ADD INDEX IDX_problem_account_AccountId (AccountId);

--
-- Create foreign key
--
ALTER TABLE problem_account
ADD CONSTRAINT FK_problem_account_AccountId FOREIGN KEY (AccountId)
REFERENCES account (AccountId) ON DELETE CASCADE;

--
-- Create foreign key
--
ALTER TABLE problem_account
ADD CONSTRAINT FK_problem_account_ProblemId FOREIGN KEY (ProblemId)
REFERENCES problem (ProblemId) ON DELETE CASCADE;

DELIMITER $$

--
-- Create procedure `proc_ProblemAccount_Audit`
--
CREATE PROCEDURE proc_ProblemAccount_Audit (IN p_ProblemId char(36), IN p_AccountId char(36), IN p_State int)
SQL SECURITY INVOKER
BEGIN
  DECLARE problemAccountIdFound char(36);

  SELECT
    pa.ProblemAccountId INTO problemAccountIdFound
  FROM problem_account pa
  WHERE pa.ProblemId = p_ProblemId
  AND pa.AccountId = p_AccountId;

  IF (problemAccountIdFound IS NULL) THEN
    INSERT INTO problem_account (ProblemAccountId, ProblemId, AccountId, State)
      VALUES (UUID(), p_ProblemId, p_AccountId, p_State);
  ELSE
    UPDATE problem_account
    SET State = p_State
    WHERE ProblemAccountId = problemAccountIdFound;
  END IF;

  SELECT
    problemAccountIdFound;
END
$$

--
-- Create procedure `proc_Problem_Filter`
--
CREATE PROCEDURE proc_Problem_Filter (IN p_QuerySearch varchar(10000),
IN p_QuerySort varchar(10000),
IN p_QueryFilter varchar(10000),
IN p_AccountId char(36))
SQL SECURITY INVOKER
COMMENT 'Lọc, tìm kiếm, sắp xếp problem theo AccountId - nlnhat (17/08/2023)'
BEGIN

  DROP TEMPORARY TABLE IF EXISTS tmp_data;
  IF (p_AccountId IS NOT NULL
    AND p_AccountId <> '00000000-0000-0000-0000-000000000000') THEN
    CREATE TEMPORARY TABLE tmp_data
    SELECT
      pa.State AS ProblemAccountState,
      vpl.*
    FROM view_problem_list vpl
      LEFT JOIN problem_account pa
        ON vpl.ProblemId = pa.ProblemId
        AND pa.AccountId = p_AccountId;
  ELSE
    CREATE TEMPORARY TABLE tmp_data
    SELECT
      0 AS ProblemAccountState,
      vpl.*
    FROM view_problem_list vpl;
  END IF;

  SET @query = CONCAT(
  'SELECT * FROM tmp_data
     WHERE 1=1 ', ' ', p_QuerySearch, ' ', p_QueryFilter, ' ', p_QuerySort, ';');

  PREPARE proc FROM @query;
  EXECUTE proc;
  DEALLOCATE PREPARE proc;
  DROP TEMPORARY TABLE IF EXISTS tmp_data;

END
$$

DELIMITER ;

--
-- Create view `view_problem_list`
--
CREATE
DEFINER = 'root'@'localhost'
SQL SECURITY INVOKER
VIEW view_problem_list
AS
WITH `acceptedcounts`
AS
(SELECT
      `p`.`ProblemId` AS `accepted_problem_id`,
      COUNT(`p`.`ProblemId`) AS `accepted_count`
    FROM (`problem` `p`
      JOIN `problem_account` `pa`
        ON (((`p`.`ProblemId` = `pa`.`ProblemId`)
        AND (`pa`.`State` = 4))))
    GROUP BY `p`.`ProblemId`), `seencounts`
AS
(SELECT
      `p`.`ProblemId` AS `seen_problem_id`,
      COUNT(`p`.`ProblemId`) AS `seen_count`
    FROM (`problem` `p`
      JOIN `problem_account` `pa`
        ON ((`p`.`ProblemId` = `pa`.`ProblemId`)))
    GROUP BY `p`.`ProblemId`), `problemorder`
AS
(SELECT
      `p`.`ProblemId` AS `ProblemId`,
      DENSE_RANK() OVER (
      ORDER BY `p`.`ProblemCode` DESC) AS `RowNumber`
    FROM `problem` `p`)
SELECT
  `po`.`RowNumber` AS `RowNumber`,
  `p`.`ProblemId` AS `ProblemId`,
  `p`.`ProblemCode` AS `ProblemCode`,
  CONCAT(`p`.`ProblemCode`, '. ', `p`.`ProblemName`) AS `ProblemName`,
  `p`.`Difficulty` AS `Difficulty`,
  `p`.`State` AS `State`,
  `p`.`CreatedTime` AS `CreatedTime`,
  `p`.`CreatedBy` AS `CreatedBy`,
  `p`.`ModifiedBy` AS `ModifiedBy`,
  `p`.`ModifiedTime` AS `ModifiedTime`,
  `p`.`AccountId` AS `AccountId`,
  `p`.`Topic` AS `Topic`,
  `p`.`IsDraft` AS `IsDraft`,
  COALESCE(`accepted`.`accepted_count`, 0) AS `AcceptedCount`,
  COALESCE(`seen`.`seen_count`, 0) AS `SeenCount`,
  (CASE WHEN (COALESCE(`seen`.`seen_count`, 0) = 0) THEN 0 ELSE (COALESCE(`accepted`.`accepted_count`, 0) / COALESCE(`seen`.`seen_count`, 0)) END) AS `AcceptedRate`,
  ((1.5 * `accepted`.`accepted_count`) + (1 * `seen`.`seen_count`)) AS `ReactionScore`
FROM (((`problemorder` `po`
  JOIN `problem` `p`
    ON ((`po`.`ProblemId` = `p`.`ProblemId`)))
  LEFT JOIN `acceptedcounts` `accepted`
    ON ((`p`.`ProblemId` = `accepted`.`accepted_problem_id`)))
  LEFT JOIN `seencounts` `seen`
    ON ((`p`.`ProblemId` = `seen`.`seen_problem_id`)))
ORDER BY `po`.`RowNumber`;

--
-- Create table `parameter`
--
CREATE TABLE parameter (
  ParameterId char(36) NOT NULL,
  ProblemId char(36) NOT NULL,
  ParameterName varchar(255) DEFAULT NULL,
  ParameterOrder int DEFAULT NULL,
  DataType int DEFAULT NULL COMMENT 'Enum DataType',
  PRIMARY KEY (ParameterId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 204,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `UK_parameter_ParameterId` on table `parameter`
--
ALTER TABLE parameter
ADD UNIQUE INDEX UK_parameter_ParameterId (ParameterId);

--
-- Create index `IDX_parameter_ProblemId` on table `parameter`
--
ALTER TABLE parameter
ADD INDEX IDX_parameter_ProblemId (ProblemId);

--
-- Create foreign key
--
ALTER TABLE parameter
ADD CONSTRAINT FK_parameter_ProblemId FOREIGN KEY (ProblemId)
REFERENCES problem (ProblemId) ON DELETE CASCADE;

--
-- Create table `contest`
--
CREATE TABLE contest (
  ContestId char(36) NOT NULL DEFAULT (UUID()),
  ContestName varchar(255) NOT NULL,
  ContestCode varchar(20) NOT NULL,
  Alias varchar(255) DEFAULT NULL,
  Password varchar(255) DEFAULT NULL,
  StartTime datetime DEFAULT NULL,
  EndTime datetime DEFAULT NULL,
  TimeToDo int DEFAULT NULL,
  CreatedBy varchar(255) DEFAULT NULL,
  CreatedTime datetime DEFAULT NULL,
  ModifiedBy varchar(255) DEFAULT NULL,
  ModifiedTime datetime DEFAULT NULL,
  IsPublic tinyint(1) DEFAULT 0,
  AccountId char(36) DEFAULT NULL,
  PRIMARY KEY (ContestId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 546,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `UK_contest_ContestId` on table `contest`
--
ALTER TABLE contest
ADD UNIQUE INDEX UK_contest_ContestId (ContestId);

--
-- Create index `UK_contest_ContestCode` on table `contest`
--
ALTER TABLE contest
ADD UNIQUE INDEX UK_contest_ContestCode (ContestCode);

--
-- Create index `UK_contest_Alias` on table `contest`
--
ALTER TABLE contest
ADD UNIQUE INDEX UK_contest_Alias (Alias);

--
-- Create index `IDX_contest_AccountId` on table `contest`
--
ALTER TABLE contest
ADD INDEX IDX_contest_AccountId (AccountId);

--
-- Create index `IDX_contest_ContestName` on table `contest`
--
ALTER TABLE contest
ADD INDEX IDX_contest_ContestName (ContestName);

--
-- Create foreign key
--
ALTER TABLE contest
ADD CONSTRAINT FK_contest_AccountId FOREIGN KEY (AccountId)
REFERENCES account (AccountId) ON DELETE CASCADE;

--
-- Create view `view_contest`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_contest
AS
SELECT
  ROW_NUMBER() OVER (
  ORDER BY `c`.`CreatedTime` DESC, `c`.`ContestCode`) AS `RowNumber`,
  `c`.`ContestId` AS `ContestId`,
  `c`.`ContestName` AS `ContestName`,
  `c`.`ContestCode` AS `ContestCode`,
  `c`.`Alias` AS `Alias`,
  `c`.`Password` AS `Password`,
  (CASE WHEN ((`c`.`Password` IS NULL) OR
      (`c`.`Password` = '')) THEN FALSE ELSE TRUE END) AS `HasPassword`,
  (CASE WHEN (UTC_TIMESTAMP() < `c`.`StartTime`) THEN 1 WHEN (UTC_TIMESTAMP() >= `c`.`EndTime`) THEN 3 ELSE 2 END) AS `State`,
  `c`.`StartTime` AS `StartTime`,
  `c`.`EndTime` AS `EndTime`,
  `c`.`TimeToDo` AS `TimeToDo`,
  `c`.`CreatedBy` AS `CreatedBy`,
  `c`.`CreatedTime` AS `CreatedTime`,
  `c`.`ModifiedBy` AS `ModifiedBy`,
  `c`.`ModifiedTime` AS `ModifiedTime`,
  `c`.`IsPublic` AS `IsPublic`,
  `c`.`AccountId` AS `AccountId`,
  `a`.`FullName` AS `AccountFullName`
FROM (`contest` `c`
  LEFT JOIN `account` `a`
    ON ((`c`.`AccountId` = `a`.`AccountId`)));

--
-- Create table `contest_problem`
--
CREATE TABLE contest_problem (
  ContestProblemId char(36) NOT NULL DEFAULT (UUID()),
  ContestId char(36) NOT NULL,
  ProblemId char(36) NOT NULL,
  Score int DEFAULT NULL,
  `Order` int DEFAULT NULL,
  PRIMARY KEY (ContestProblemId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 1489,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `UK_contest_problem_ContestProblemId` on table `contest_problem`
--
ALTER TABLE contest_problem
ADD UNIQUE INDEX UK_contest_problem_ContestProblemId (ContestProblemId);

--
-- Create index `IDX_contest_problem_ContestId` on table `contest_problem`
--
ALTER TABLE contest_problem
ADD INDEX IDX_contest_problem_ContestId (ContestId);

--
-- Create index `IDX_contest_problem_ProblemId` on table `contest_problem`
--
ALTER TABLE contest_problem
ADD INDEX IDX_contest_problem_ProblemId (ProblemId);

--
-- Create foreign key
--
ALTER TABLE contest_problem
ADD CONSTRAINT FK_contest_problem_ContestId FOREIGN KEY (ContestId)
REFERENCES contest (ContestId) ON DELETE CASCADE;

--
-- Create foreign key
--
ALTER TABLE contest_problem
ADD CONSTRAINT FK_contest_problem_ProblemId FOREIGN KEY (ProblemId)
REFERENCES problem (ProblemId) ON DELETE CASCADE;

--
-- Create view `view_contest_problem_list`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_contest_problem_list
AS
SELECT
  `cp`.`ContestProblemId` AS `ContestProblemId`,
  `cp`.`ContestId` AS `ContestId`,
  `cp`.`ProblemId` AS `ProblemId`,
  `p`.`ProblemName` AS `ProblemName`,
  `cp`.`Score` AS `Score`,
  `cp`.`Order` AS `Order`
FROM (`contest_problem` `cp`
  LEFT JOIN `problem` `p`
    ON ((`cp`.`ProblemId` = `p`.`ProblemId`)));

--
-- Create table `contest_problem_account`
--
CREATE TABLE contest_problem_account (
  ContestProblemAccountId char(36) NOT NULL DEFAULT (UUID()),
  AccountId char(36) NOT NULL,
  ContestProblemId char(36) NOT NULL,
  State int DEFAULT NULL COMMENT '3: Sai,  4 Đúng',
  PRIMARY KEY (ContestProblemAccountId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `UK_account_contest_problem_AccountContestProblemId` on table `contest_problem_account`
--
ALTER TABLE contest_problem_account
ADD UNIQUE INDEX UK_account_contest_problem_AccountContestProblemId (ContestProblemAccountId);

--
-- Create foreign key
--
ALTER TABLE contest_problem_account
ADD CONSTRAINT FK_account_contest_problem_AccountId FOREIGN KEY (AccountId)
REFERENCES account (AccountId) ON DELETE CASCADE;

--
-- Create foreign key
--
ALTER TABLE contest_problem_account
ADD CONSTRAINT FK_account_contest_problem_ContestProblemId FOREIGN KEY (ContestProblemId)
REFERENCES contest_problem (ContestProblemId);

--
-- Create view `view_contest_problem_account`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_contest_problem_account
AS
SELECT
  `cpa`.`ContestProblemAccountId` AS `ContestProblemAccountId`,
  `cpa`.`AccountId` AS `AccountId`,
  `cpa`.`ContestProblemId` AS `ContestProblemId`,
  `cpa`.`State` AS `State`
FROM `contest_problem_account` `cpa`;

--
-- Create table `contest_account`
--
CREATE TABLE contest_account (
  ContestAccountId char(36) NOT NULL DEFAULT (UUID()),
  ContestId char(36) NOT NULL,
  AccountId char(36) NOT NULL,
  State int DEFAULT NULL,
  UsedTime int DEFAULT NULL,
  StartTime datetime DEFAULT NULL,
  PRIMARY KEY (ContestAccountId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 546,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `UK_ContestAccount_ContestAccountId` on table `contest_account`
--
ALTER TABLE contest_account
ADD UNIQUE INDEX UK_ContestAccount_ContestAccountId (ContestAccountId);

--
-- Create index `IDX_ContestAccount_ContestId` on table `contest_account`
--
ALTER TABLE contest_account
ADD INDEX IDX_ContestAccount_ContestId (ContestId);

--
-- Create index `IDX_ContestAccount_AccountId` on table `contest_account`
--
ALTER TABLE contest_account
ADD INDEX IDX_ContestAccount_AccountId (AccountId);

--
-- Create foreign key
--
ALTER TABLE contest_account
ADD CONSTRAINT FK_ContestAccount_AccountId FOREIGN KEY (AccountId)
REFERENCES account (AccountId) ON DELETE CASCADE;

--
-- Create foreign key
--
ALTER TABLE contest_account
ADD CONSTRAINT FK_ContestAccount_ContestId FOREIGN KEY (ContestId)
REFERENCES contest (ContestId) ON DELETE CASCADE;

DELIMITER $$

--
-- Create procedure `proc_Contest_Filter`
--
CREATE PROCEDURE proc_Contest_Filter (IN p_QuerySearch varchar(10000), IN p_QuerySort varchar(10000), IN p_QueryFilter varchar(10000), IN p_AccountId char(36))
SQL SECURITY INVOKER
COMMENT 'Lọc, tìm kiếm, sắp xếp contest theo AccountId - nlnhat (17/08/2023)'
BEGIN

  DROP TEMPORARY TABLE IF EXISTS tmp_data;
  IF (p_AccountId IS NOT NULL
    AND p_AccountId <> '00000000-0000-0000-0000-000000000000') THEN
    CREATE TEMPORARY TABLE tmp_data
    SELECT
      ca.State AS ContestAccountState,
      vcl.*
    FROM view_contest_list vcl
      LEFT JOIN contest_account ca
        ON vcl.ContestId = ca.ContestId
        AND ca.AccountId = p_AccountId;
  ELSE
    CREATE TEMPORARY TABLE tmp_data
    SELECT
      0 AS ContestAccountState,
      vcl.*
    FROM view_contest_list vcl;
  END IF;

  SET @query = CONCAT(
  'SELECT * FROM tmp_data
     WHERE 1=1 ', ' ', p_QuerySearch, ' ', p_QueryFilter, ' ', p_QuerySort, ';');

  PREPARE proc FROM @query;
  EXECUTE proc;
  DEALLOCATE PREPARE proc;
  DROP TEMPORARY TABLE IF EXISTS tmp_data;

END
$$

DELIMITER ;

--
-- Create view `view_contest_list`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_contest_list
AS
WITH `joincounts`
AS
(SELECT
      `c`.`ContestId` AS `join_contest_id`,
      COUNT(`c`.`ContestId`) AS `join_count`
    FROM (`contest` `c`
      JOIN `contest_account` `ca`
        ON ((`c`.`ContestId` = `ca`.`ContestId`)))
    GROUP BY `c`.`ContestId`), `contestorder`
AS
(SELECT
      `c`.`ContestId` AS `ContestId`,
      DENSE_RANK() OVER (
      ORDER BY `c`.`CreatedTime` DESC, `c`.`StartTime`, `c`.`EndTime`, `c`.`ContestCode`) AS `RowNumber`
    FROM `contest` `c`)
SELECT
  `c`.`ContestId` AS `ContestId`,
  `c`.`ContestName` AS `ContestName`,
  `c`.`ContestCode` AS `ContestCode`,
  `c`.`Alias` AS `Alias`,
  `c`.`Password` AS `Password`,
  ((`c`.`Password` IS NOT NULL) AND (NOT ((`c`.`Password` LIKE '')))) AS `HasPassword`,
  (CASE WHEN (UTC_TIMESTAMP() < `c`.`StartTime`) THEN 1 WHEN (UTC_TIMESTAMP() >= `c`.`EndTime`) THEN 3 ELSE 2 END) AS `State`,
  `c`.`StartTime` AS `StartTime`,
  `c`.`EndTime` AS `EndTime`,
  `c`.`TimeToDo` AS `TimeToDo`,
  `c`.`CreatedBy` AS `CreatedBy`,
  `c`.`CreatedTime` AS `CreatedTime`,
  `c`.`ModifiedBy` AS `ModifiedBy`,
  `c`.`ModifiedTime` AS `ModifiedTime`,
  `c`.`IsPublic` AS `IsPublic`,
  `c`.`AccountId` AS `AccountId`,
  COALESCE(`join`.`join_count`, 0) AS `JoinCount`
FROM ((`contestorder` `co`
  join `contest` `c`
    ON ((`co`.`ContestId` = `c`.`ContestId`)))
  LEFT join `joincounts` `join`
    ON ((`c`.`ContestId` = `join`.`join_contest_id`)));

--
-- Create view `view_contest_account_list`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_contest_account_list
AS
SELECT
  ROW_NUMBER() OVER (
  ORDER BY SUM(`cp`.`Score`) DESC, `a`.`FullName`) AS `RowNumber`,
  `ca`.`ContestAccountId` AS `ContestAccountId`,
  `ca`.`ContestId` AS `ContestId`,
  `ca`.`AccountId` AS `AccountId`,
  `a`.`FullName` AS `FullName`,
  `ca`.`State` AS `State`,
  `ca`.`UsedTime` AS `UsedTime`,
  `ca`.`StartTime` AS `StartTime`,
  COALESCE(SUM((CASE WHEN (`cpa`.`State` = 4) THEN `cp`.`Score` ELSE 0 END)), 0) AS `TotalScore`
FROM (((`contest_account` `ca`
  LEFT JOIN `contest_problem` `cp`
    ON ((`ca`.`ContestId` = `cp`.`ContestId`)))
  LEFT JOIN `contest_problem_account` `cpa`
    ON (((`cp`.`ContestProblemId` = `cpa`.`ContestProblemId`)
    AND (`ca`.`AccountId` = `cpa`.`AccountId`))))
  LEFT JOIN `account` `a`
    ON ((`a`.`AccountId` = `ca`.`AccountId`)))
GROUP BY `ca`.`ContestAccountId`,
         `ca`.`ContestId`,
         `ca`.`AccountId`,
         `a`.`FullName`,
         `ca`.`State`,
         `ca`.`UsedTime`,
         `ca`.`StartTime`
ORDER BY `TotalScore` DESC, `a`.`FullName`;

--
-- Create view `view_contest_account`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_contest_account
AS
SELECT
  `ca`.`ContestAccountId` AS `ContestAccountId`,
  `ca`.`ContestId` AS `ContestId`,
  `ca`.`AccountId` AS `AccountId`,
  `a`.`FullName` AS `FullName`,
  (CASE WHEN ((`ca`.`State` = 2) AND
      (TIMESTAMPDIFF(MINUTE, `ca`.`StartTime`, UTC_TIMESTAMP()) > `c`.`TimeToDo`)) THEN 3 ELSE `ca`.`State` END) AS `State`,
  `ca`.`UsedTime` AS `UsedTime`,
  `ca`.`StartTime` AS `StartTime`
FROM ((`contest_account` `ca`
  LEFT JOIN `contest` `c`
    ON ((`ca`.`ContestId` = `c`.`ContestId`)))
  LEFT JOIN `account` `a`
    ON ((`c`.`AccountId` = `a`.`AccountId`)));

DELIMITER $$

--
-- Create procedure `proc_Contest_Get`
--
CREATE PROCEDURE proc_Contest_Get (IN p_ContestId char(36), IN p_AccountId char(36))
SQL SECURITY INVOKER
BEGIN
  SELECT
    c.ContestId AS Id,
    c.*,
    ca.State AS ContestAccountState,
    ca.ContestAccountId,
    ca.FullName
  FROM view_contest c
    LEFT JOIN view_contest_account ca
      ON c.ContestId = ca.ContestId
      AND ca.AccountId = p_AccountId
  WHERE c.ContestId = p_ContestId;

  SELECT
    cpa.State AS ContestProblemAccountState,
    cpa.ContestProblemAccountId,
    cp.*
  FROM view_contest_problem_list cp
    LEFT JOIN contest_problem_account cpa
      ON cpa.ContestProblemId = cp.ContestProblemId
      AND cpa.AccountId = p_AccountId
  WHERE cp.ContestId = p_ContestId
  ORDER BY cp.Order;

  SELECT
    ca.ContestAccountId AS Id,
    ca.*
  FROM view_contest_account ca
  WHERE ca.ContestId = p_ContestId
  AND ca.AccountId = p_AccountId;
END
$$

DELIMITER ;

--
-- Create table `language`
--
CREATE TABLE language (
  LanguageId char(36) NOT NULL DEFAULT (UUID()),
  LanguageName varchar(255) NOT NULL,
  JudgeId int NOT NULL,
  PRIMARY KEY (LanguageId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 2340,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `UK_language_LanguageName` on table `language`
--
ALTER TABLE language
ADD UNIQUE INDEX UK_language_LanguageName (LanguageName);

--
-- Create index `UK_language_Id` on table `language`
--
ALTER TABLE language
ADD UNIQUE INDEX UK_language_Id (JudgeId);

--
-- Create index `UK_language_LanguageId` on table `language`
--
ALTER TABLE language
ADD UNIQUE INDEX UK_language_LanguageId (LanguageId);

--
-- Create view `view_problem`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_problem
AS
SELECT
  ROW_NUMBER() OVER (
  ORDER BY `p`.`CreatedTime` DESC, `p`.`ProblemCode`) AS `RowNumber`,
  `p`.`ProblemId` AS `ProblemId`,
  `p`.`ProblemCode` AS `ProblemCode`,
  `p`.`ProblemName` AS `ProblemName`,
  `p`.`Alias` AS `Alias`,
  `p`.`Difficulty` AS `Difficulty`,
  `p`.`Content` AS `Content`,
  `p`.`Hint` AS `Hint`,
  `p`.`Solution` AS `Solution`,
  `p`.`SolutionLanguageId` AS `SolutionLanguageId`,
  `p`.`LimitTime` AS `LimitTime`,
  `p`.`LimitMemory` AS `LimitMemory`,
  `p`.`AccountId` AS `AccountId`,
  `p`.`State` AS `State`,
  `p`.`CreatedBy` AS `CreatedBy`,
  `p`.`CreatedTime` AS `CreatedTime`,
  `p`.`ModifiedBy` AS `ModifiedBy`,
  `p`.`ModifiedTime` AS `ModifiedTime`,
  `p`.`Topic` AS `Topic`,
  `p`.`OutputType` AS `OutputType`,
  `p`.`IsDraft` AS `IsDraft`,
  `l`.`LanguageName` AS `LanguageName`,
  `l`.`JudgeId` AS `JudgeId`
FROM (`problem` `p`
  LEFT JOIN `language` `l`
    ON ((`p`.`SolutionLanguageId` = `l`.`LanguageId`)));

DELIMITER $$

--
-- Create procedure `proc_Problem_Get`
--
CREATE PROCEDURE proc_Problem_Get (IN p_ProblemId char(36), IN p_AccountId char(36))
SQL SECURITY INVOKER
BEGIN
  SELECT
    p.ProblemId AS Id,
    p.*,
    pa.State AS ProblemAccountState,
    pa.ProblemAccountId
  FROM view_problem p
    LEFT JOIN problem_account pa
      ON p.ProblemId = pa.ProblemId
      AND pa.AccountId = p_AccountId
  WHERE p.ProblemId = p_ProblemId;

  SELECT
    *
  FROM parameter pa
  WHERE pa.ProblemId = p_ProblemId
  ORDER BY pa.ParameterOrder;
  SELECT
    *
  FROM testcase t
  WHERE t.ProblemId = p_ProblemId
  ORDER BY t.TestcaseOrder;
END
$$

DELIMITER ;

--
-- Create view `view_language`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_language
AS
SELECT
  ROW_NUMBER() OVER (
  ORDER BY `l`.`LanguageName`, `l`.`JudgeId`) AS `RowNumber`,
  `l`.`LanguageId` AS `LanguageId`,
  `l`.`LanguageName` AS `LanguageName`,
  `l`.`JudgeId` AS `JudgeId`
FROM `language` `l`;

--
-- Create table `submission`
--
CREATE TABLE submission (
  SubmissionId char(36) NOT NULL DEFAULT 'uuid',
  ContestProblemAccountId char(36) DEFAULT NULL,
  ProblemAccountId char(36) DEFAULT NULL,
  SourceCode text DEFAULT NULL,
  LanguageId char(36) DEFAULT NULL,
  RunTime decimal(10, 6) DEFAULT NULL,
  Memory decimal(10, 6) DEFAULT NULL,
  StatusId int DEFAULT NULL,
  PassedCount int DEFAULT NULL,
  FailedCount int DEFAULT NULL,
  CreatedTime datetime DEFAULT NULL,
  StatusName varchar(255) DEFAULT NULL,
  Parameters varchar(1000) DEFAULT NULL,
  Testcases varchar(1000) DEFAULT NULL,
  PRIMARY KEY (SubmissionId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 712,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `UK_submission_SubmissionId` on table `submission`
--
ALTER TABLE submission
ADD UNIQUE INDEX UK_submission_SubmissionId (SubmissionId);

--
-- Create index `IDX_submission_LanguageId` on table `submission`
--
ALTER TABLE submission
ADD INDEX IDX_submission_LanguageId (LanguageId);

--
-- Create index `IDX_submission_ParentId` on table `submission`
--
ALTER TABLE submission
ADD INDEX IDX_submission_ParentId (ProblemAccountId);

--
-- Create foreign key
--
ALTER TABLE submission
ADD CONSTRAINT FK_submission_ContestProblemAccountId FOREIGN KEY (ContestProblemAccountId)
REFERENCES contest_problem_account (ContestProblemAccountId) ON DELETE CASCADE;

--
-- Create foreign key
--
ALTER TABLE submission
ADD CONSTRAINT FK_submission_LanguageId FOREIGN KEY (LanguageId)
REFERENCES language (LanguageId);

--
-- Create foreign key
--
ALTER TABLE submission
ADD CONSTRAINT FK_submission_ProblemAccountId FOREIGN KEY (ProblemAccountId)
REFERENCES problem_account (ProblemAccountId) ON DELETE CASCADE;

--
-- Create view `view_submission_list`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_submission_list
AS
SELECT
  ROW_NUMBER() OVER (
  ORDER BY `s`.`CreatedTime` DESC) AS `RowNumber`,
  `s`.`SubmissionId` AS `SubmissionId`,
  `s`.`ProblemAccountId` AS `ProblemAccountId`,
  `s`.`ContestProblemAccountId` AS `ContestProblemAccountId`,
  `cp`.`ContestProblemId` AS `ContestProblemId`,
  `cp`.`ContestId` AS `ContestId`,
  COALESCE(`a_cpa`.`FullName`, `a`.`FullName`) AS `FullName`,
  `s`.`SourceCode` AS `SourceCode`,
  `s`.`StatusId` AS `StatusId`,
  `s`.`StatusName` AS `StatusName`,
  `s`.`RunTime` AS `RunTime`,
  `s`.`Memory` AS `Memory`,
  `s`.`PassedCount` AS `PassedCount`,
  `s`.`FailedCount` AS `FailedCount`,
  `s`.`Parameters` AS `Parameters`,
  `s`.`Testcases` AS `Testcases`,
  `s`.`CreatedTime` AS `CreatedTime`,
  `l`.`LanguageId` AS `LanguageId`,
  `l`.`LanguageName` AS `LanguageName`,
  `l`.`JudgeId` AS `JudgeId`
FROM (((((((`submission` `s`
  LEFT JOIN `language` `l`
    ON ((`s`.`LanguageId` = `l`.`LanguageId`)))
  LEFT JOIN `contest_problem_account` `cpa`
    ON ((`s`.`ContestProblemAccountId` = `cpa`.`ContestProblemAccountId`)))
  LEFT JOIN `account` `a_cpa`
    ON ((`cpa`.`AccountId` = `a_cpa`.`AccountId`)))
  LEFT JOIN `problem_account` `pa`
    ON ((`s`.`ProblemAccountId` = `pa`.`ProblemAccountId`)))
  LEFT JOIN `account` `a`
    ON ((`pa`.`AccountId` = `a`.`AccountId`)))
  LEFT JOIN `contest_problem` `cp`
    ON ((`cpa`.`ContestProblemId` = `cp`.`ContestProblemId`)))
  LEFT JOIN (SELECT
      `s`.`SubmissionId` AS `SubmissionId`,
      COALESCE(`pa`.`AccountId`, `cpa`.`AccountId`) AS `AccountId`
    FROM ((`submission` `s`
      LEFT JOIN `problem_account` `pa`
        ON ((`s`.`ProblemAccountId` = `pa`.`ProblemAccountId`)))
      LEFT JOIN `contest_problem_account` `cpa`
        ON ((`s`.`ContestProblemAccountId` = `cpa`.`ContestProblemAccountId`)))) `sa`
    ON ((`s`.`SubmissionId` = `sa`.`SubmissionId`)));

DELIMITER $$

--
-- Create procedure `proc_Submission_Filter`
--
CREATE PROCEDURE proc_Submission_Filter (IN p_QuerySearch varchar(10000), IN p_QuerySort varchar(10000), IN p_QueryFilter varchar(10000))
SQL SECURITY INVOKER
COMMENT 'Lọc, tìm kiếm, sắp xếp submission theo parentId - nlnhat (17/08/2023)'
BEGIN

  DROP TEMPORARY TABLE IF EXISTS tmp_data;
  CREATE TEMPORARY TABLE tmp_data
  SELECT
    *
  FROM view_submission_list vsl;

  SET @query = CONCAT(
  'SELECT * FROM tmp_data
     WHERE 1=1 ', ' ', p_QuerySearch, ' ', p_QueryFilter, ' ', p_QuerySort, ';');

  PREPARE proc FROM @query;
  EXECUTE proc;
  DEALLOCATE PREPARE proc;
  DROP TEMPORARY TABLE IF EXISTS tmp_data;

END
$$

--
-- Create procedure `proc_Role_GetByCode`
--
CREATE PROCEDURE proc_Role_GetByCode (IN p_RoleCode varchar(255))
SQL SECURITY INVOKER
BEGIN
  SELECT
    *
  FROM role r
  WHERE r.RoleCode LIKE p_RoleCode;
END
$$

--
-- Create procedure `proc_Role_GetAll`
--
CREATE PROCEDURE proc_Role_GetAll ()
SQL SECURITY INVOKER
BEGIN
  SELECT
    *
  FROM role r
  ORDER BY r.SortOrder;
END
$$

--
-- Create procedure `proc_ContestAccount_Filter`
--
CREATE PROCEDURE proc_ContestAccount_Filter (IN p_QuerySearch varchar(10000), IN p_QuerySort varchar(10000), IN p_QueryFilter varchar(10000), p_AccountId char(36))
SQL SECURITY INVOKER
COMMENT 'Lọc, tìm kiếm, sắp xếp ContestAccount theo ContestId - nlnhat (17/08/2023)'
BEGIN
  CREATE TEMPORARY TABLE tmp_data
  SELECT
    vcal.ContestAccountId AS Id,
    vcal.*
  FROM view_contest_account_list vcal;

  SET @query = CONCAT(
  'SELECT * FROM tmp_data
     WHERE 1=1 ', ' ', p_QuerySearch, ' ', p_QueryFilter, ' ', p_QuerySort, ';');

  PREPARE proc FROM @query;
  EXECUTE proc;
  DEALLOCATE PREPARE proc;
  DROP TEMPORARY TABLE IF EXISTS tmp_data;

END
$$

DELIMITER ;

-- 
-- Dumping data for table account
--
INSERT INTO account VALUES
('1152da18-24d8-65b6-0380-e8e2a817c80e', 'nlnhat1', '$2a$10$G5bySMW2xitNWNIuQHA9z.HnLowJIfcvChLy4D0Fe4M.Kb2vhmcU6', 'nlnhat28@gmail.com', '0957846957', 'Nguyễn Long Nhật', 3, xa$10$G5bySMW2xitNWNIuQHA9z.'),
('1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 'nlnhat', '$2a$10$G5bySMW2xitNWNIuQHA9z.HnLowJIfcvChLy4D0Fe4M.Kb2vhmcU6', 'nlnhat28@gmail.com', '0859384839', 'Nguyễn Long Nhật', 1, xa$10$G5bySMW2xitNWNIuQHA9z.');

-- 
-- Dumping data for table contest
--
INSERT INTO contest VALUES
('30059f2e-27a7-4ec7-8ff7-c2d364b199e7', 'Thi giữa kỳ 2', 'iJ3Eyn', NULL, NULL, '2024-01-30 02:33:23', NULL, 15, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-28 02:34:28', NULL, NULL, 0, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef'),
('c6e0ee2e-b205-4753-925c-08782ec52710', 'Thi giữa kỳ', 'DATN', NULL, '123', '2024-01-30 02:47:10', '2024-01-31 02:51:10', 20, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-30 02:50:12', NULL, NULL, 1, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef'),
('dfc8d9e3-ff96-44bd-9f31-73ba898d1c84', 'Thi cuối kỳ 2', 'lRaKQq', NULL, '123456', '2024-01-28 02:48:01', '2024-01-30 16:38:01', 540, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-25 18:02:05', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-29 16:52:46', 1, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef'),
('e714546a-57b9-445c-bb78-e57bf1d8d4d8', 'Luyện tập', 'M0oHRi', NULL, NULL, '2024-01-27 02:36:20', '2024-01-28 04:18:44', 60, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-28 02:36:49', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-28 04:19:50', 0, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef');

-- 
-- Dumping data for table problem
--
INSERT INTO problem VALUES
('061a8d21-e112-4ed0-8aff-6ee753d04d87', 1, 'Tích 2 số', NULL, 1, NULL, NULL, 'class Solution {\n    public int solve(int num1, int num2) {\n        return num1 * num2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 1.000000, 10000.0000, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 1, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-21 09:07:47', NULL, NULL, NULL, 5, 0),
('25caf127-790c-4337-8859-82a6107fa2f2', 4, 'Tổng 2 số', NULL, 1, NULL, NULL, 'class Solution {\n    public int solve(int int1, int int2) {\n        return int1 + int2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', NULL, NULL, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 3, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-21 09:23:52', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-21 13:13:55', NULL, 5, 0),
('2bffbb45-5d0f-4ea8-8376-6fcf25345407', 1, 'Tổng 3 số', NULL, 1, '<p>Tính tổng 3 số tự nhiên\t</p>', '<p>Không\t</p>', 'class Solution {\n    public int solve(int int1, int int2, int int3) {\n        return int1 + int2 + int3;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', NULL, NULL, '1152da18-24d8-65b6-0380-e8e2a817c80e', 3, '1152da18-24d8-65b6-0380-e8e2a817c80e', '2024-01-31 14:25:38', NULL, NULL, 'Toán', 5, 0),
('34efaf79-91bc-476e-8a99-eda53b00d187', 3, 'Hiệu 2 số', NULL, 1, '<p>Hiệu 2 số</p>', '<p>F</p>', 'class Solution {\n    public int solve(int num1, int num2) {\n        return num1 - num2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 10.000000, 10000.0000, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 3, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-21 09:19:38', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-30 01:24:05', 'Toán  học', 5, 0),
('3a0d98a2-7b00-4be0-ab55-869bfa56c0f5', 8, 'Tổng 2 số', NULL, 1, '<p>Cho 2 số nguyên và tính tổng</p>', NULL, 'class Solution {\n    public int solve(int num1, int num2) {\n        return num1 + num2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 10.000000, 10000.0000, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 1, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-30 02:25:44', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-30 02:43:39', 'Toán', 5, 0),
('4b4d0be2-7002-4e98-b966-5a84b0bb0462', 1, 'Tổng 2 số nguyên', NULL, 1, '<p>Toán cấp 2</p>', '<p>Không</p>', 'class Solution {\n    public int solve(int num1, int num2) {\n        return num1 + num2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 10.000000, 12000.0000, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 3, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-21 08:36:18', NULL, NULL, 'Toán', 5, 1),
('b12fb54a-7656-4367-a99d-7a8d4bbcd358', 2, 'Tích 2 số nguyên', NULL, 1, NULL, NULL, 'class Solution {\n    public int solve(int num1, int num2) {\n        return num1 * num2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 10.000000, 10000.0000, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 3, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-21 09:12:13', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-21 13:12:53', NULL, 5, 0),
('d524f97a-de73-405f-ae2f-9f070bb26648', 7, 'Tổng 2 số', NULL, 1, NULL, NULL, 'class Solution {\n    public int solve(int n, int h) {\n        return n + h;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', NULL, NULL, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 3, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-21 09:30:37', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-21 13:00:09', 'Toán', 5, 1),
('f13c0063-1b5b-4fd3-a389-ef959547a40c', 5, 'Tổng 2 số', NULL, 1, '<p>Tính tổng 2 số</p>', NULL, 'class Solution {\n    public int solve(int int1, int int2) {\n        return int1 + int2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', NULL, NULL, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 3, '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-21 09:27:27', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '2024-01-21 13:11:43', 'Toán học', 5, 1);

-- 
-- Dumping data for table contest_problem
--
INSERT INTO contest_problem VALUES
('1cdfc66f-3383-4222-8f83-a98eb8792ab7', '30059f2e-27a7-4ec7-8ff7-c2d364b199e7', '25caf127-790c-4337-8859-82a6107fa2f2', 20, 2),
('4376a110-b90d-44b4-b867-e807b3720586', '30059f2e-27a7-4ec7-8ff7-c2d364b199e7', '34efaf79-91bc-476e-8a99-eda53b00d187', 10, 1),
('792a36b0-2636-4bef-835e-07f0ab31312f', 'dfc8d9e3-ff96-44bd-9f31-73ba898d1c84', '061a8d21-e112-4ed0-8aff-6ee753d04d87', 10, 4),
('85241cc4-482e-48f3-8296-b17e71447d58', 'dfc8d9e3-ff96-44bd-9f31-73ba898d1c84', '25caf127-790c-4337-8859-82a6107fa2f2', 20, 3),
('8ab78680-b59a-45a2-845a-a289842b6a24', 'dfc8d9e3-ff96-44bd-9f31-73ba898d1c84', '34efaf79-91bc-476e-8a99-eda53b00d187', 10, 2),
('8de2faa2-9e28-479f-82f7-1420f59bc531', 'e714546a-57b9-445c-bb78-e57bf1d8d4d8', '34efaf79-91bc-476e-8a99-eda53b00d187', 5, 2),
('af07c615-fa0f-4189-93a0-15a0dad28cb7', 'e714546a-57b9-445c-bb78-e57bf1d8d4d8', 'b12fb54a-7656-4367-a99d-7a8d4bbcd358', 5, 1),
('d2ed29d3-5bfb-4d5f-8019-f691ac72d0aa', 'dfc8d9e3-ff96-44bd-9f31-73ba898d1c84', 'b12fb54a-7656-4367-a99d-7a8d4bbcd358', 10, 1),
('ecd2d176-95ac-4cbd-9115-703874b03b91', 'c6e0ee2e-b205-4753-925c-08782ec52710', '3a0d98a2-7b00-4be0-ab55-869bfa56c0f5', 10, 1),
('fb3386c9-bfb2-4755-aa33-8d8b3c415e54', 'c6e0ee2e-b205-4753-925c-08782ec52710', '34efaf79-91bc-476e-8a99-eda53b00d187', 10, 3),
('ff62ef4c-f027-4112-a4d0-c02cc9e8a341', 'c6e0ee2e-b205-4753-925c-08782ec52710', '061a8d21-e112-4ed0-8aff-6ee753d04d87', 10, 2);

-- 
-- Dumping data for table problem_account
--
INSERT INTO problem_account VALUES
('0bacfc08-bb9b-11ee-96d8-d45d646ae901', 'b12fb54a-7656-4367-a99d-7a8d4bbcd358', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 1),
('0fc20e9b-bb9b-11ee-96d8-d45d646ae901', '061a8d21-e112-4ed0-8aff-6ee753d04d87', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 1),
('4a71b3eb-ba07-11ee-96d8-d45d646ae901', '25caf127-790c-4337-8859-82a6107fa2f2', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 4),
('7de73b79-bf19-11ee-961a-d45d646ae901', '3a0d98a2-7b00-4be0-ab55-869bfa56c0f5', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 1),
('c8ca320c-c044-11ee-961a-d45d646ae901', '2bffbb45-5d0f-4ea8-8376-6fcf25345407', '1152da18-24d8-65b6-0380-e8e2a817c80e', 1),
('db3d9e75-bb9a-11ee-96d8-d45d646ae901', '34efaf79-91bc-476e-8a99-eda53b00d187', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 1),
('e9f5cd4d-c044-11ee-961a-d45d646ae901', '3a0d98a2-7b00-4be0-ab55-869bfa56c0f5', '1152da18-24d8-65b6-0380-e8e2a817c80e', 1);

-- 
-- Dumping data for table language
--
INSERT INTO language VALUES
('2f1172a9-1b5d-6fc4-777e-3e3b283cabde', 'C (GCC 8.3.0)', 49),
('2f8a5a0d-54fa-587b-5676-66508ad02725', 'C++ (GCC 8.3.0)', 53),
('5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 'C# (Mono 6.6.0.161)', 51),
('699acaa2-66da-563a-1702-ce5da15ac776', 'Java (JDK 17.0.6)', 91),
('6f0fc907-5bf7-6e28-ef96-94965a4eaa62', 'JavaScript (Node.js 12.14.0)', 63),
('7e919581-5fd4-1caf-5776-66508ad02725', 'PHP (7.4.1)', 68),
('d0dc804b-90c9-11ee-ba10-d45d646ae901', 'Python (3.11.2)', 92);

-- 
-- Dumping data for table contest_problem_account
--
INSERT INTO contest_problem_account VALUES
('276d4149-8a9e-4e19-a14e-756ad5ba1b8c', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 'fb3386c9-bfb2-4755-aa33-8d8b3c415e54', 3),
('67efc04a-9d6d-48c7-8f0b-78ebfeb9a22b', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 'd2ed29d3-5bfb-4d5f-8019-f691ac72d0aa', 4),
('6b691811-08b9-4d4a-a926-8f63d0471f6b', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 'ff62ef4c-f027-4112-a4d0-c02cc9e8a341', 4),
('aa7e4e6a-b40d-4259-bb3f-30425a8cd7d1', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', '8ab78680-b59a-45a2-845a-a289842b6a24', 4),
('e67ee85a-661d-41de-a952-54b2f2dd1ace', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 'ecd2d176-95ac-4cbd-9115-703874b03b91', 4);

-- 
-- Dumping data for table testcase
--
INSERT INTO testcase VALUES
('21123c77-e1d1-4cbb-af2d-3f2a01e480b4', '3a0d98a2-7b00-4be0-ab55-869bfa56c0f5', '["2", "2"]', '"4"', 2, 0, 1),
('2d2ee3f8-e797-4bab-ae5e-31c8a6752b80', '4b4d0be2-7002-4e98-b966-5a84b0bb0462', '["2", "3"]', '"5"', 0, 1, 1),
('336dcc08-1515-485c-ace5-8d4f8c8cd144', '25caf127-790c-4337-8859-82a6107fa2f2', '["15", "10"]', '"25"', 0, 1, 1),
('3aab138f-b0a4-456f-aa70-5041175e92b0', '34efaf79-91bc-476e-8a99-eda53b00d187', '["1", "1"]', '"0"', 0, 0, 1),
('429fce0e-41cd-480b-90cf-2f7fc417289b', '061a8d21-e112-4ed0-8aff-6ee753d04d87', '["5", "5"]', '"25"', 0, 1, 1),
('603569c3-e6f7-41d6-aca7-def5bd891729', 'b12fb54a-7656-4367-a99d-7a8d4bbcd358', '["5", "6"]', '"30"', 0, 0, 1),
('6f92f1b9-9dc4-4a7d-a246-4c0ed621c4e5', '34efaf79-91bc-476e-8a99-eda53b00d187', '["15", "10"]', '"5"', 0, 1, 1),
('7e78a8d9-cedf-4394-befa-e867813ba8de', '2bffbb45-5d0f-4ea8-8376-6fcf25345407', '["1", "5", "6"]', '"12"', 3, 0, 1),
('8fca724e-244b-43e0-bf0f-98efd674ab81', 'f13c0063-1b5b-4fd3-a389-ef959547a40c', '["3", "6"]', '"9"', 2, 0, 1),
('a25f9e53-ae30-43ab-9467-7cb4c23befb3', 'b12fb54a-7656-4367-a99d-7a8d4bbcd358', '["5", "5"]', '"25"', 0, 1, 1),
('a9ef2e21-1d56-4619-8eb8-e1eb02a603fa', '3a0d98a2-7b00-4be0-ab55-869bfa56c0f5', '["1", "2"]', '"3"', 1, 1, 1),
('ab63b006-16d5-4e23-b7e0-6ae0672f025f', 'f13c0063-1b5b-4fd3-a389-ef959547a40c', '["1", "1"]', '"2"', 1, 1, 1),
('af920f65-c1bd-4bc9-8c79-93357b0b150f', '2bffbb45-5d0f-4ea8-8376-6fcf25345407', '["2", "0", "4"]', '"6"', 2, 1, 1),
('c740ddeb-7519-4ad0-b96e-f76aa426ada7', '25caf127-790c-4337-8859-82a6107fa2f2', '["1", "1"]', '"2"', 0, 0, 1),
('cae16a3f-fe25-4711-a524-e51b8c39b8e8', '4b4d0be2-7002-4e98-b966-5a84b0bb0462', '["4", "7"]', '"11"', 0, 0, 1),
('cafa5566-38a2-4ac4-804e-208c10dd7fc0', '061a8d21-e112-4ed0-8aff-6ee753d04d87', '["0", "50"]', '"0"', 0, 0, 1),
('dbc7634d-3bc7-49b2-aeff-5e3765558de3', '2bffbb45-5d0f-4ea8-8376-6fcf25345407', '["1", "1", "1"]', '"3"', 1, 1, 1);

-- 
-- Dumping data for table submission
--
INSERT INTO submission VALUES
('0b2671b7-0ad2-4912-88c1-d24ce448b64f', NULL, '4a71b3eb-ba07-11ee-96d8-d45d646ae901', 'class Solution {\n    public int solve(int int1, int int2) {\n        \n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', NULL, NULL, 6, 0, 1, '2024-01-27 06:34:00', 'CompilationError', NULL, NULL),
('1240bf7e-634e-482a-97aa-d1eb3ba0507c', '6b691811-08b9-4d4a-a926-8f63d0471f6b', NULL, 'class Solution {\n    public int solve(int num1, int num2) {\n        return num1 * num2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 0.012000, 3912.000000, 3, 2, 0, '2024-01-30 02:54:22', 'Accepted', NULL, NULL),
('1675cd99-b613-444e-870a-aba53d191ac9', NULL, '4a71b3eb-ba07-11ee-96d8-d45d646ae901', 'class Solution {\n    public int solve(int int1, int int2) {\n        return int1 + int2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 0.011000, 3972.000000, 3, 2, 0, '2024-01-30 02:29:59', 'Accepted', NULL, NULL),
('207d774c-aae8-4803-9abd-5a7a6b89ca12', 'e67ee85a-661d-41de-a952-54b2f2dd1ace', NULL, 'class Solution {\n    public int solve(int num1, int num2) {\n        return num1 + num2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 0.012000, 3924.000000, 3, 2, 0, '2024-01-30 02:53:57', 'Accepted', NULL, NULL),
('5954a5e3-5246-4ca7-8812-0adedb627f52', NULL, '7de73b79-bf19-11ee-961a-d45d646ae901', 'class Solution {\n    public int solve(int num1, int num2) {\n        return num1 - num2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 0.014000, 3972.000000, 4, 0, 2, '2024-01-30 02:45:48', 'WrongAnswer', NULL, NULL),
('6696801c-1cd0-4a4d-a812-3a67034ba11c', NULL, '4a71b3eb-ba07-11ee-96d8-d45d646ae901', 'class Solution {\n    public int solve(int int1, int int2) {\n        return int2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 0.013000, 3968.000000, 4, 0, 2, '2024-01-25 15:41:27', 'WrongAnswer', NULL, NULL),
('66fcc3e6-0ab3-44ce-b009-f68078733c3c', NULL, '7de73b79-bf19-11ee-961a-d45d646ae901', 'class Solution {\n    public int solve(int num1, int num2) {\n        return num1 + num2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 0.020000, 4244.000000, 3, 2, 0, '2024-01-30 03:00:54', 'Accepted', NULL, NULL),
('802f0291-1d55-4c42-9018-f4dd105b2b0c', NULL, 'db3d9e75-bb9a-11ee-96d8-d45d646ae901', 'int solve(int num1, int num2) {\n    return num1 - num2;\n}', '2f1172a9-1b5d-6fc4-777e-3e3b283cabde', 0.001000, 848.000000, 3, 2, 0, '2024-01-31 15:04:12', 'Accepted', '[{"ParameterId":"d07faba6-ea9a-4c9a-8471-bf9ff1eadeec","ProblemId":"40ad49be-ea09-403f-8856-868cc790ac31","ParameterName":"num1","ParameterOrder":1,"DataType":5},{"ParameterId":"dff55fe3-c5b5-4ddf-a62f-0e4b086bd1fe","ProblemId":"40ad49be-ea09-403f-8856-868cc790ac31","ParameterName":"num2","ParameterOrder":2,"DataType":5}]', '[{"TestcaseId":"3aab138f-b0a4-456f-aa70-5041175e92b0","ProblemId":"40ad49be-ea09-403f-8856-868cc790ac31","TestcaseOrder":0,"Inputs":["1","1"],"ExpectedOutput":"0","AllowView":false,"IsActivated":true,"Status":{"status_id":3,"status_name":"Accepted","testcase_id":"3aab138f-b0a4-456f-aa70-5041175e92b0","user_msg":null,"token":"fe8a8f67-7f08-4a77-96fe-2443e3748ab0","stdout":"0","stderr":"","compile_output":"","message":"","exit_code":0,"time":"0.001","memory":732}},{"TestcaseId":"6f92f1b9-9dc4-4a7d-a246-4c0ed621c4e5","ProblemId":"40ad49be-ea09-403f-8856-868cc790ac31","TestcaseOrder":0,"Inputs":["15","10"],"ExpectedOutput":"5","AllowView":true,"IsActivated":true,"Status":{"status_id":3,"status_name":"Accepted","testcase_id":"6f92f1b9-9dc4-4a7d-a246-4c0ed621c4e5","user_msg":null,"token":"e40c7abd-3942-48fb-8758-9fc91f8aec3e","stdout":"5","stderr":"","compile_output":"","message":"","exit_code":0,"time":"0.001","memory":848}}]'),
('8ada68a7-2bb9-477a-9d60-b0653da5c0b9', NULL, '4a71b3eb-ba07-11ee-96d8-d45d646ae901', 'class Solution {\n    public int solve(int int1, int int2) {\n        return int1 + int2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 0.011000, 4012.000000, 3, 2, 0, '2024-01-25 15:40:33', 'Accepted', NULL, NULL),
('9174be55-1009-4afd-aa99-7276f0fb0071', NULL, '4a71b3eb-ba07-11ee-96d8-d45d646ae901', 'class Solution {\n    public int solve(int int1, int int2) {\n        return int2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 0.015000, 5212.000000, 4, 0, 2, '2024-01-25 15:39:07', 'WrongAnswer', NULL, NULL),
('9b4a05b4-12ac-4b9e-9efc-d79d236b21b1', NULL, '4a71b3eb-ba07-11ee-96d8-d45d646ae901', 'class Solution {\n    public int solve(int int1, int int2) {\n        \n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', NULL, NULL, 6, 0, 1, '2024-01-27 05:02:30', 'CompilationError', NULL, NULL),
('a0a6bade-5684-4b52-a64e-6e86b052345c', NULL, '4a71b3eb-ba07-11ee-96d8-d45d646ae901', 'class Solution {\n    public int solve(int int1, int int2) {\n        return int2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 0.011000, 3912.000000, 4, 0, 2, '2024-01-25 15:37:32', 'WrongAnswer', NULL, NULL),
('a3af786c-73fc-450a-8b0f-d88cbcfba82c', NULL, '4a71b3eb-ba07-11ee-96d8-d45d646ae901', 'class Solution {\n    public int solve(int int1, int int2) {\n        return int1 - int2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 0.002000, 4012.000000, 4, 0, 2, '2024-01-24 15:30:35', 'WrongAnswer', NULL, NULL),
('a5c11318-4dca-49c9-956a-dca09c90ddb4', NULL, '4a71b3eb-ba07-11ee-96d8-d45d646ae901', 'class Solution {\n    public int solve(int int1, int int2) {\n        return int1;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 0.017000, 6968.000000, 4, 0, 2, '2024-01-25 14:56:58', 'WrongAnswer', NULL, NULL),
('a9d0f760-fd79-4e2d-a001-6ee266e6e948', '67efc04a-9d6d-48c7-8f0b-78ebfeb9a22b', NULL, 'class Solution {\n    public int solve(int num1, int num2) {\n        return num1 + num2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 0.012000, 4108.000000, 4, 0, 2, '2024-01-29 17:22:27', 'WrongAnswer', NULL, NULL),
('bb284b37-2a54-4424-8a9e-21618ec3a0ca', NULL, '4a71b3eb-ba07-11ee-96d8-d45d646ae901', 'const solve = function(int1, int2) {\n    \n}', '6f0fc907-5bf7-6e28-ef96-94965a4eaa62', NULL, NULL, 11, 0, 1, '2024-01-25 15:42:17', 'RuntimeErrorNZEC', NULL, NULL),
('bf41effb-a956-4407-83df-69df1bd53d3b', '67efc04a-9d6d-48c7-8f0b-78ebfeb9a22b', NULL, 'class Solution {\n    public int solve(int num1, int num2) {\n        return num1 * num2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 0.012000, 4012.000000, 3, 2, 0, '2024-01-29 17:22:40', 'Accepted', NULL, NULL),
('c8f74b05-c510-4c76-8241-9fa3eb07d670', NULL, '4a71b3eb-ba07-11ee-96d8-d45d646ae901', 'class Solution {\n    public int solve(int int1, int int2) {\n        return int1 + int2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 0.011000, 4036.000000, 3, 2, 0, '2024-01-25 15:38:50', 'Accepted', NULL, NULL),
('c9d69d3f-4b6d-4e65-9222-30459335b804', NULL, '7de73b79-bf19-11ee-961a-d45d646ae901', 'class Solution {\n    public int solve(int num1, int num2) {\n        return num1 + num2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 0.012000, 3964.000000, 3, 2, 0, '2024-01-30 02:46:48', 'Accepted', NULL, NULL),
('ccbbc488-8632-451f-b905-37789fb65822', NULL, '4a71b3eb-ba07-11ee-96d8-d45d646ae901', 'class Solution {\n    public int solve(int int1, int int2) {\n        return int1 + int2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 0.004000, 4008.000000, 3, 2, 0, '2024-01-23 17:46:02', 'Accepted', NULL, NULL),
('e3b2a8e9-bc8d-45e2-b2ba-ef39601a9f0b', '276d4149-8a9e-4e19-a14e-756ad5ba1b8c', NULL, 'class Solution {\n    public int solve(int num1, int num2) {\n        return 1;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 0.011000, 3960.000000, 4, 0, 2, '2024-01-30 02:54:38', 'WrongAnswer', NULL, NULL),
('ec4db4de-904f-4edb-a3c1-af48aedbf961', 'aa7e4e6a-b40d-4259-bb3f-30425a8cd7d1', NULL, 'class Solution {\n    public int solve(int num1, int num2) {\n        return num1 - num2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 0.021000, 3996.000000, 3, 2, 0, '2024-01-29 17:22:54', 'Accepted', NULL, NULL),
('ee440ebf-49d2-4a32-95a2-ce080547d2e0', NULL, '4a71b3eb-ba07-11ee-96d8-d45d646ae901', 'class Solution {\n    public int solve(int int1, int int2) {\n        return int1 + int2;\n    }\n}', '5984fdaa-1e0e-68c7-3e2b-e89ea5388e0b', 0.005000, 3964.000000, 3, 2, 0, '2024-01-23 17:45:16', 'Accepted', NULL, NULL);

-- 
-- Dumping data for table parameter
--
INSERT INTO parameter VALUES
('0ef28df2-974b-46a0-aced-bd458635e75f', '2bffbb45-5d0f-4ea8-8376-6fcf25345407', 'int2', 2, 5),
('13a65722-16e3-4e76-bf09-9fbaeeb258d4', '2bffbb45-5d0f-4ea8-8376-6fcf25345407', 'int1', 1, 5),
('1bcaadbf-0ddf-45a3-9d69-5be9e7cc5182', 'b12fb54a-7656-4367-a99d-7a8d4bbcd358', 'num2', 2, 5),
('31182b4b-96fa-4d7b-95c2-8dd7a2e35298', 'b12fb54a-7656-4367-a99d-7a8d4bbcd358', 'num1', 1, 5),
('4319218c-a372-4c51-942e-ecdd76b15a92', '3a0d98a2-7b00-4be0-ab55-869bfa56c0f5', 'num2', 2, 5),
('67292dac-eda3-49ca-adbf-b268c75587e2', '25caf127-790c-4337-8859-82a6107fa2f2', 'int1', 1, 5),
('7cd8cf06-8e9a-42a2-a71f-bfa1c95aad36', '2bffbb45-5d0f-4ea8-8376-6fcf25345407', 'int3', 3, 5),
('88caac4e-fd99-464c-b3cf-65e1695adc95', '3a0d98a2-7b00-4be0-ab55-869bfa56c0f5', 'num1', 1, 5),
('896a2a9a-24fe-48c5-9097-c0769c89c278', '4b4d0be2-7002-4e98-b966-5a84b0bb0462', 'num2', 2, 5),
('9e08e2c9-8e9b-4ce4-a0fc-d567fdf745cd', 'f13c0063-1b5b-4fd3-a389-ef959547a40c', 'int2', 2, 5),
('a963560f-6def-4f93-a221-98f0c3f6f449', '25caf127-790c-4337-8859-82a6107fa2f2', 'int2', 2, 5),
('ab75b7d7-9f20-4718-8266-47d26c20e530', '4b4d0be2-7002-4e98-b966-5a84b0bb0462', 'num1', 1, 5),
('ac9d966c-153d-471f-be60-f76449eb62d8', 'f13c0063-1b5b-4fd3-a389-ef959547a40c', 'int1', 1, 5),
('ad858e70-2357-4e4e-a300-b0c6a93da11f', '061a8d21-e112-4ed0-8aff-6ee753d04d87', 'num2', 2, 5),
('af5eb9b6-2fa5-448e-a55a-562b30601f97', '061a8d21-e112-4ed0-8aff-6ee753d04d87', 'num1', 1, 5),
('d07faba6-ea9a-4c9a-8471-bf9ff1eadeec', '34efaf79-91bc-476e-8a99-eda53b00d187', 'num1', 1, 5),
('dff55fe3-c5b5-4ddf-a62f-0e4b086bd1fe', '34efaf79-91bc-476e-8a99-eda53b00d187', 'num2', 2, 5);

-- 
-- Dumping data for table contest_account
--
INSERT INTO contest_account VALUES
('781e6558-3e12-4294-8b51-c5447ce4976f', 'dfc8d9e3-ff96-44bd-9f31-73ba898d1c84', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 3, 540, '2024-01-29 15:21:15'),
('e151870f-b24f-4fce-b3ad-3ef01d5b67d4', 'c6e0ee2e-b205-4753-925c-08782ec52710', '1bf8a43c-47fb-4d6c-1863-eeb1d8ed8cef', 3, 143, '2024-01-30 02:52:45');

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;